{"version":3,"sources":["components/SchedulerResults.js","components/ShowTasks.js","constants/TasksConstants.js","services/scan.js","services/sstf.js","services/fcfs.js","services/cscan.js","services/SchedulerService.js","services/edf.js","services/fdscan.js","components/AddTaskComponent.js","actions/TasksActions.js","App.js","serviceWorker.js","reducers/TaskReducer.js","reducers/RootReducer.js","reducers/store.js","index.js"],"names":["SchedulerResults","props","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","results","console","log","length","react_default","a","createElement","data","map","row","push","sstf","fcfs","scan","cscan","edf","fdscan","index_esm","width","height","chartType","loader","options","chart","title","subtitle","rootProps","data-testid","React","Component","connect","state","_state$TaskReducer","TaskReducer","tasks","ShowTasks","classes","undefined","className","root","Paper","Table_default","TableHead","TableRow","TableCell","align","TableBody","index","key","component","scope","arrivalTime","blockAddress","withStyles","padding","display","float","tasksConstants","ADD_TASK","RUN_SCHEDULER","proc","i","queue","time","actual","headPosition","headMovement","direction","p","tmp","filter","task","Math","abs","shift","SchedulerService","procString","JSON","stringify","parse","AddTaskComponent","_this","updateWindowDimensions","bind","assertThisInitialized","handleAdd","handleChange","handleStart","event","newTask","dispatch","_this$state","waitingTime","type","input","e","setState","defineProperty","target","value","_this$props","start","runScheduler","window","addEventListener","_this2","isCollapsed","react","tightRoot","wideRoot","TextField_default","label","onChange","index_es","variant","onClick","w","innerWidth","position","margin","marginTop","left","transform","App","components_ShowTasks","components_AddTaskComponent","components_SchedulerResults","Boolean","location","hostname","match","initialState","rootReducer","combineReducers","arguments","action","concat","toConsumableArray","objectSpread","store","createStore","RootReducer","applyMiddleware","thunk","ReactDOM","render","Provider","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f1669311.chunk.js","sourcesContent":["import {connect} from \"react-redux\";\nimport React from \"react\";\nimport Chart from \"react-google-charts\";\n\nclass SchedulerResults extends React.Component {\n    constructor(props){\n        super(props);\n\n    }\n    render(){\n        const { results } = this.props;\n        console.log(results);\n        if (results.length === 0){\n            return(<div></div>)\n        };\n        let data =  [['Algorithms', 'SSTF', 'FCFS', 'SCAN', 'C-SCAN', 'EDF', 'FD-SCAN']];\n        results.map(row => (\n           data.push([' ', row.sstf, row.fcfs, row.scan, row.cscan, row.edf, row.fdscan])\n        ));\n        return(\n            <div>\n                <Chart\n                    width={'500px'}\n                    height={'300px'}\n                    chartType=\"Bar\"\n                    loader={<div>Loading Chart</div>}\n                    data={data}\n                    options={{\n                        // Material design options\n                        chart: {\n                            title: 'Disk scheduling algorithms',\n                            subtitle: 'simulation of algorithms FCFS, SSTF, SCAN, C-SCAN, EDF, FD-SCAN.',\n                        },\n                    }}\n                    // For tests\n                    rootProps={{ 'data-testid': '2' }}\n                />\n            </div>\n        )\n    }\n}\n\nfunction mapStateToProps(state) {\n    const {tasks, results} = state.TaskReducer;\n    // console.log(\"results\");\n    // console.log(results);\n    return {tasks, results}\n}\n\nexport default connect(mapStateToProps)(SchedulerResults)\n","import React from \"react\";\nimport {connect} from \"react-redux\";\nimport Table from '@material-ui/core/Table';\nimport Paper from \"@material-ui/core/es/Paper/Paper\";\nimport TableHead from \"@material-ui/core/es/TableHead/TableHead\";\nimport TableCell from \"@material-ui/core/es/TableCell/TableCell\";\nimport TableBody from \"@material-ui/core/es/TableBody/TableBody\";\nimport TableRow from \"@material-ui/core/es/TableRow/TableRow\";\nimport { withStyles} from \"@material-ui/core\";\nimport PropTypes from 'prop-types';\n\n\nclass ShowTasks extends React.Component{\n\n    render() {\n        const { tasks } = this.props;\n        const { classes } = this.props;\n        if (tasks.length < 1 || tasks === undefined){\n            return <div/>\n        }\n        return(\n            <div className={classes.root}>\n                <Paper>\n                    <Table>\n                        <TableHead>\n                            <TableRow>\n                                <TableCell>id</TableCell>\n                                <TableCell align=\"right\">arrival time</TableCell>\n                                <TableCell align=\"right\">block address</TableCell>\n                            </TableRow>\n                        </TableHead>\n                        <TableBody>\n                            {tasks.map((row, index) => (\n                                <TableRow key={index}>\n                                    <TableCell component=\"th\" scope=\"row\">\n                                        {index}\n                                    </TableCell>\n                                    <TableCell align=\"right\">{row.arrivalTime}</TableCell>\n                                    <TableCell align=\"right\">{row.blockAddress}</TableCell>\n                                </TableRow>\n                            ))}\n                        </TableBody>\n                    </Table>\n                </Paper>\n            </div>\n        )\n    }\n}\n\nconst styles = {\n    root: {\n        padding: \"15px\",\n        display: \"inline-block\",\n        float: \"left\"\n    },\n};\nShowTasks.propTypes = {\n    classes: PropTypes.object.isRequired\n};\n\nfunction mapStateToProps(state) {\n    const {tasks} = state.TaskReducer;\n    return {tasks}\n};\n\nexport default connect(mapStateToProps)(withStyles(styles)(ShowTasks));\n","export const tasksConstants = {\n    ADD_TASK: 'ADD_TASK',\n    RUN_SCHEDULER: 'RUN_SCHEDULER',\n}\n","export function scan(proc){\n    let i = 0;\n    let queue = [];\n    let time = 0;\n    let actual = undefined;\n    let headPosition = 0;\n    let headMovement = 0;\n    let direction = 1;\n    while (i < proc.length || queue.length !== 0) {\n        for (let p = i; p < proc.length; p++){\n            if (time >= proc[p].arrivalTime){\n                queue.push(proc[p]);\n                i++;\n            }\n        }\n        if (queue.length !== 0) {\n            actual = queue[0];\n\n            let tmp = queue.filter(function (task) {\n                return headPosition < task.blockAddress * direction\n            });\n            if (tmp.length === 0){\n                direction *= -1;\n                tmp = queue.filter(function (task) {\n                    return headPosition < task.blockAddress * direction\n                })\n            }\n\n            tmp.map(function (task) {\n                if (Math.abs(headPosition - task.blockAddress) < Math.abs(headPosition - actual.blockAddress)){\n                    actual = task;\n                }\n            });\n            queue = queue.filter(function (task) {\n                return task !== actual;\n            });\n            headMovement += Math.abs(headPosition - actual.blockAddress);\n            headPosition = actual.blockAddress;\n        }\n        time++;\n    }\n    return headMovement\n}\n\n","export function sstf(proc){\n    let i = 0;\n    let queue = [];\n    let time = 0;\n    let actual = undefined;\n    let headPosition = 0;\n    let headMovement = 0;\n    while (i < proc.length || queue.length !== 0) {\n        for (let p = i; p < proc.length; p++){\n            if (time >= proc[p].arrivalTime){\n                queue.push(proc[p]);\n                i++;\n            }\n        }\n        if (queue.length !== 0) {\n            actual = queue[0];\n            queue.map(function (task) {\n                if (Math.abs(headPosition - task.blockAddress) < Math.abs(headPosition - actual.blockAddress)){\n                    actual = task;\n                }\n            });\n            queue = queue.filter(function (task) {\n                return task !== actual;\n            });\n            headMovement += Math.abs(headPosition - actual.blockAddress);\n            headPosition = actual.blockAddress;\n        }\n        time++;\n    }\n    return headMovement\n}\n\n// export default sstf;\n","\n\n  export function fcfs(proc){\n        let i = 0;\n        let queue = [];\n        let time = 0;\n        let actual = undefined;\n        let headPosition = 0;\n        let headMovement = 0;\n        while (i < proc.length || queue.length !== 0) {\n            for (let p = i; p < proc.length; p++){\n                if (time >= proc[p].arrivalTime){\n                    queue.push(proc[p]);\n                    i++;\n                }\n            }\n            if (queue.length !== 0) {\n                actual = queue.shift();\n                headMovement += Math.abs(headPosition - actual.blockAddress);\n                headPosition = actual.blockAddress;\n            }\n            time++;\n        }\n        return headMovement\n    }\n\n","export function cscan(proc){\n    let i = 0;\n    let queue = [];\n    let time = 0;\n    let actual = undefined;\n    let headPosition = 0;\n    let headMovement = 0;\n    while (i < proc.length || queue.length !== 0) {\n        for (let p = i; p < proc.length; p++){\n            if (time >= proc[p].arrivalTime){\n                queue.push(proc[p]);\n                i++;\n            }\n        }\n        if (queue.length !== 0) {\n            actual = queue[0];\n\n            let tmp = queue.filter(function (task) {\n                return headPosition < task.blockAddress\n            });\n            if (tmp.length === 0){\n                headMovement -= -headPosition;//headMovement += headPosition\n                //fuck this dynamic typing\n                headPosition = 0;\n                tmp = queue.filter(function (task) {\n                    return headPosition < task.blockAddress\n                });\n            }\n            console.log(\"headMovement\");\n            console.log(headMovement);\n\n            tmp.map(function (task) {\n                if (Math.abs(headPosition - task.blockAddress) < Math.abs(headPosition - actual.blockAddress)){\n                    actual = task;\n                }\n            });\n            queue = queue.filter(function (task) {\n                return task !== actual;\n            });\n\n            console.log(\"actual\");\n            console.log(actual);\n            headMovement += Math.abs(headPosition - actual.blockAddress);\n            headPosition = actual.blockAddress;\n        }\n        time++;\n    }\n    return headMovement\n}\n","import {scan} from \"./scan\";\nimport {sstf} from \"./sstf\";\nimport {fcfs} from \"./fcfs\";\nimport {cscan} from \"./cscan\";\nimport {edf} from \"./edf\";\nimport {fdscan} from \"./fdscan\";\n\nclass SchedulerService{\n\n\n    constructor(tasks){\n        this.tasks = tasks;\n    }\n\n    start() {\n        console.log(\"start\");\n        console.log(this.tasks);\n        let procString = JSON.stringify(this.tasks);\n        const results = {\n            sstf: sstf(JSON.parse(procString)),\n            fcfs: fcfs(JSON.parse(procString)),\n            scan: scan(JSON.parse(procString)),\n            cscan: cscan(JSON.parse(procString)),\n            edf: edf(JSON.parse(procString)),\n            fdscan: fdscan(JSON.parse(procString))\n        };\n        return results\n    }\n\n}\n\nexport default SchedulerService;\n// Disk scheduling algorithms\n// simulation of algorithms FCFS, SSTF, SCAN, C-SCAN, EDF, FD-SCAN.\n// Compare their execution time (estimated by the total movement of disk head).\n\n","export function edf(proc){\n    return 0;\n}\n","export function fdscan(proc) {\n    return 0;\n}\n\n\n","import * as React from \"react\";\nimport {Button, withStyles} from \"@material-ui/core\";\nimport TextField from \"@material-ui/core/TextField\";\nimport {connect} from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport {addTask, runScheduler} from \"../actions/TasksActions\";\n\n\n\n\nclass AddTaskComponent extends React.Component{\n\n    constructor(props){\n        super(props);\n        this.state = {\n            arrivalTime: 0,\n            blockAddress: 0,\n        };\n        this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n        this.handleAdd = this.handleAdd.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleStart = this.handleStart.bind(this);\n\n    }\n\n    handleAdd(event){\n        const { dispatch } = this.props;\n        const { arrivalTime, blockAddress } = this.state;\n        dispatch(addTask({\n            arrivalTime: arrivalTime < 1 ? 1: arrivalTime,\n            blockAddress: blockAddress < 1 ? 1 : blockAddress,\n            waitingTime: 0,\n        }));\n    };\n\n    handleChange(input, e) {\n        this.setState({\n            [input]: e.target.value\n        });\n    };\n    //\n    handleStart(){\n        const { dispatch, tasks } = this.props;\n        dispatch(runScheduler(tasks));\n    };\n\n    componentDidMount() {\n        this.updateWindowDimensions();\n        window.addEventListener('resize', this.updateWindowDimensions)\n    }\n    render(){\n        const { classes } = this.props;\n        const { isCollapsed } = this.state;\n        return(\n            <div className={isCollapsed ?  classes.tightRoot: classes.wideRoot}>\n                <TextField\n                    label=\"Arrival time\"\n                    type=\"number\"\n                    onChange={event => {this.handleChange('arrivalTime', event)}}\n                />\n                <br/>\n                <TextField\n                    label=\"Block address\"\n                    type=\"number\"\n                    onChange={event => {this.handleChange('blockAddress', event)}}\n                />\n                <br/>\n                <br/>\n                <Button\n                    variant=\"contained\"\n                    onClick={this.handleAdd}\n                >\n                    ADD\n                </Button>\n                <Button\n                    variant=\"contained\"\n                    onClick={this.handleStart}\n                >\n                    Start\n                </Button>\n            </div>\n        )\n    }\n\n    updateWindowDimensions() {\n        const w = window.innerWidth;\n        const isCollapsed = w <= 960;\n        this.setState({\n            width: w,\n            isCollapsed\n        });\n    }\n}\nconst styles = {\n    wideRoot: {\n        position: \"fixed\",\n        display: \"inline-block\",\n        margin: \"auto\",\n        marginTop: \"50px\",\n        left: \"50%\",\n        transform: \"translateX(-50%)\"\n    },\n    tightRoot: {\n\n        position: \"inherit\",\n        display: \"inline-block\",\n        margin: \"auto\",\n        marginTop: \"50px\",\n\n    }\n};\nAddTaskComponent.propTypes = {\n    classes: PropTypes.object.isRequired\n};\n\nfunction mapStateToProps(state) {\n    const {tasks} = state.TaskReducer;\n    return {tasks}\n};\n\nexport default connect(mapStateToProps)(withStyles(styles)(AddTaskComponent));\n","import {tasksConstants} from \"../constants/TasksConstants\";\nimport SchedulerService from \"../services/SchedulerService\";\n\n\nexport function addTask(newTask) {\n    return dispatch => {\n        const action = {\n            newTask,\n            type: tasksConstants.ADD_TASK\n        };\n        dispatch(action)\n    }\n}\n\nexport function runScheduler(tasks) {\n    return dispatch => {\n        const scheduler = new SchedulerService(tasks);\n        let results = scheduler.start();\n        const action = {\n            results: results,\n            type: tasksConstants.RUN_SCHEDULER\n        };\n        dispatch(action)\n    }\n}\n\n// export default addTask;\n","import React, { Component } from 'react';\nimport './App.css';\n\nimport SchedulerResults from \"./components/SchedulerResults\";\nimport ShowTasks from \"./components/ShowTasks\";\nimport AddTaskComponent from \"./components/AddTaskComponent\";\n\nclass App extends Component {\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n        </header>\n          <ShowTasks/>\n          <AddTaskComponent/>\n          <SchedulerResults/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import {tasksConstants} from \"../constants/TasksConstants\";\n\n\nconst initialState = {\n    tasks: [],\n    results: [],\n};\n\n\n\n\nexport function TaskReducer(state = initialState, action) {\n    switch (action.type) {\n        case tasksConstants.ADD_TASK:\n            return {\n                tasks: [...state.tasks, action.newTask],\n                results: state.results\n           };\n        case tasksConstants.RUN_SCHEDULER:\n            const { results } = action;\n            return{\n                ...state,\n                results: [...state.results, results]\n            };\n        default:\n            return{\n                ...state\n            }\n    }\n\n\n}\n","import {combineReducers} from \"redux\";\nimport {TaskReducer} from \"./TaskReducer\";\n\nconst rootReducer = combineReducers({\n    TaskReducer,\n});\n\nexport default rootReducer;\n\n","import {createStore} from \"redux\";\nimport RootReducer from \"./RootReducer\";\nimport {applyMiddleware} from \"redux/es/redux\";\nimport thunk from 'redux-thunk';\n\n\n\nexport const store = createStore(\n    RootReducer,\n    applyMiddleware(thunk)\n);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport Provider from \"react-redux/es/components/Provider\";\nimport {store} from \"./reducers/store\";\n\nReactDOM.render(\n    <Provider store={store}><App /></Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}